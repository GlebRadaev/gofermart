// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/user/balance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the current loyalty points balance and the total amount withdrawn for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Баланс"
                ],
                "summary": "Get current user balance",
                "responses": {
                    "200": {
                        "description": "Current balance and withdrawn points",
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceResponseDTO"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/user/balance/withdraw": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraw points from the user balance for the provided order number.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Баланс"
                ],
                "summary": "Request funds withdrawal",
                "parameters": [
                    {
                        "description": "Withdrawal request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BalanceWithdrawRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdrawal successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "402": {
                        "description": "Insufficient balance",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "422": {
                        "description": "Invalid order number",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "description": "Log in with a user account and get a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/user/orders": {
            "get": {
                "description": "Retrieve a list of uploaded orders for the authorized user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders list for user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetOrdersResponseDTO"
                            }
                        }
                    },
                    "204": {
                        "description": "No data available",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allow authenticated users to add a new order using a valid order number.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Add a new order",
                "parameters": [
                    {
                        "description": "Order number to be added",
                        "name": "orderNumber",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order already uploaded by this user",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "202": {
                        "description": "New order has been accepted for processing",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request due to incorrect order number format",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "409": {
                        "description": "Order already uploaded by another user",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "422": {
                        "description": "Invalid order number format",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "description": "Create a new user account with login and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/api/user/withdrawals": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get withdrawals history for the authenticated user with sorted by processed at date",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Баланс"
                ],
                "summary": "Get withdrawals history",
                "responses": {
                    "200": {
                        "description": "Withdrawals history",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GetWithdrawalsResponseDTO"
                            }
                        }
                    },
                    "204": {
                        "description": "Withdrawals not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BalanceResponseDTO": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "number",
                    "example": 500.5
                },
                "withdrawn": {
                    "type": "number",
                    "example": 42
                }
            }
        },
        "dto.BalanceWithdrawRequestDTO": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string",
                    "example": "2377225624"
                },
                "sum": {
                    "type": "number",
                    "example": 500
                }
            }
        },
        "dto.GetOrdersResponseDTO": {
            "type": "object",
            "properties": {
                "accrual": {
                    "type": "number",
                    "example": 500
                },
                "number": {
                    "type": "string",
                    "example": "1234567890"
                },
                "status": {
                    "type": "string",
                    "example": "PROCESSED"
                },
                "uploaded_at": {
                    "type": "string",
                    "example": "2020-12-09T16:09:57+03:00"
                }
            }
        },
        "dto.GetWithdrawalsResponseDTO": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string",
                    "example": "2377225624"
                },
                "processed_at": {
                    "type": "string",
                    "example": "2020-12-09T16:09:57+03:00"
                },
                "sum": {
                    "type": "number",
                    "example": 500
                }
            }
        },
        "dto.LoginRequestDTO": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.LoginResponseDTO": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterRequestDTO": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.RegisterResponseDTO": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GoFemart API",
	Description:      "API Server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
