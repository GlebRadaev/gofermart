// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/accrual/workerpool.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/accrual/workerpool.go -destination=/var/yandex-project/gofermart/internal/accrual/workerpool_mock.go -package=accrual
//

// Package accrual is a generated GoMock package.
package accrual

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWorkerPoolI is a mock of WorkerPoolI interface.
type MockWorkerPoolI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerPoolIMockRecorder
	isgomock struct{}
}

// MockWorkerPoolIMockRecorder is the mock recorder for MockWorkerPoolI.
type MockWorkerPoolIMockRecorder struct {
	mock *MockWorkerPoolI
}

// NewMockWorkerPoolI creates a new mock instance.
func NewMockWorkerPoolI(ctrl *gomock.Controller) *MockWorkerPoolI {
	mock := &MockWorkerPoolI{ctrl: ctrl}
	mock.recorder = &MockWorkerPoolIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerPoolI) EXPECT() *MockWorkerPoolIMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockWorkerPoolI) AddTask(ctx context.Context, task Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockWorkerPoolIMockRecorder) AddTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockWorkerPoolI)(nil).AddTask), ctx, task)
}

// Close mocks base method.
func (m *MockWorkerPoolI) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWorkerPoolIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWorkerPoolI)(nil).Close))
}
