// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/handlers/orders/orders.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/handlers/orders/orders.go -destination=/var/yandex-project/gofermart/internal/handlers/orders/orders_mock.go -package=orders
//

// Package orders is a generated GoMock package.
package orders

import (
	context "context"
	reflect "reflect"

	domain "github.com/GlebRadaev/gofermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockService) GetOrders(ctx context.Context, userID int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockServiceMockRecorder) GetOrders(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockService)(nil).GetOrders), ctx, userID)
}

// ProcessOrder mocks base method.
func (m *MockService) ProcessOrder(ctx context.Context, userID int, orderNumber string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", ctx, userID, orderNumber)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockServiceMockRecorder) ProcessOrder(ctx, userID, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockService)(nil).ProcessOrder), ctx, userID, orderNumber)
}
