// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/handlers/handlers.go -destination=/var/yandex-project/gofermart/internal/handlers/handlers_mock.go -package=handlers
//

// Package handlers is a generated GoMock package.
package handlers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
	isgomock struct{}
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthHandler) Login(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", w, r)
}

// Login indicates an expected call of Login.
func (mr *MockAuthHandlerMockRecorder) Login(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthHandler)(nil).Login), w, r)
}

// Register mocks base method.
func (m *MockAuthHandler) Register(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w, r)
}

// Register indicates an expected call of Register.
func (mr *MockAuthHandlerMockRecorder) Register(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthHandler)(nil).Register), w, r)
}

// MockOrderHandler is a mock of OrderHandler interface.
type MockOrderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHandlerMockRecorder
	isgomock struct{}
}

// MockOrderHandlerMockRecorder is the mock recorder for MockOrderHandler.
type MockOrderHandlerMockRecorder struct {
	mock *MockOrderHandler
}

// NewMockOrderHandler creates a new mock instance.
func NewMockOrderHandler(ctrl *gomock.Controller) *MockOrderHandler {
	mock := &MockOrderHandler{ctrl: ctrl}
	mock.recorder = &MockOrderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHandler) EXPECT() *MockOrderHandlerMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderHandler) AddOrder(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrder", w, r)
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderHandlerMockRecorder) AddOrder(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderHandler)(nil).AddOrder), w, r)
}

// GetOrders mocks base method.
func (m *MockOrderHandler) GetOrders(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetOrders", w, r)
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderHandlerMockRecorder) GetOrders(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderHandler)(nil).GetOrders), w, r)
}

// MockBalanceHandler is a mock of BalanceHandler interface.
type MockBalanceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceHandlerMockRecorder
	isgomock struct{}
}

// MockBalanceHandlerMockRecorder is the mock recorder for MockBalanceHandler.
type MockBalanceHandlerMockRecorder struct {
	mock *MockBalanceHandler
}

// NewMockBalanceHandler creates a new mock instance.
func NewMockBalanceHandler(ctrl *gomock.Controller) *MockBalanceHandler {
	mock := &MockBalanceHandler{ctrl: ctrl}
	mock.recorder = &MockBalanceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceHandler) EXPECT() *MockBalanceHandlerMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBalanceHandler) GetBalance(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBalance", w, r)
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceHandlerMockRecorder) GetBalance(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceHandler)(nil).GetBalance), w, r)
}

// GetWithdrawals mocks base method.
func (m *MockBalanceHandler) GetWithdrawals(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetWithdrawals", w, r)
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockBalanceHandlerMockRecorder) GetWithdrawals(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockBalanceHandler)(nil).GetWithdrawals), w, r)
}

// Withdraw mocks base method.
func (m *MockBalanceHandler) Withdraw(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Withdraw", w, r)
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceHandlerMockRecorder) Withdraw(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceHandler)(nil).Withdraw), w, r)
}
