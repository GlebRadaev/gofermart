// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/service/orderservice/orderservice.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/service/orderservice/orderservice.go -destination=/var/yandex-project/gofermart/internal/service/orderservice/orderservice_mock.go -package=orderservice
//

// Package orderservice is a generated GoMock package.
package orderservice

import (
	context "context"
	reflect "reflect"

	domain "github.com/GlebRadaev/gofermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// FindByOrderNumber mocks base method.
func (m *MockRepo) FindByOrderNumber(ctx context.Context, orderNumber string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrderNumber indicates an expected call of FindByOrderNumber.
func (mr *MockRepoMockRecorder) FindByOrderNumber(ctx, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderNumber", reflect.TypeOf((*MockRepo)(nil).FindByOrderNumber), ctx, orderNumber)
}

// FindForProcessing mocks base method.
func (m *MockRepo) FindForProcessing(ctx context.Context, limit uint32) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindForProcessing", ctx, limit)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindForProcessing indicates an expected call of FindForProcessing.
func (mr *MockRepoMockRecorder) FindForProcessing(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindForProcessing", reflect.TypeOf((*MockRepo)(nil).FindForProcessing), ctx, limit)
}

// FindOrdersByUserID mocks base method.
func (m *MockRepo) FindOrdersByUserID(ctx context.Context, userID int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByUserID indicates an expected call of FindOrdersByUserID.
func (mr *MockRepoMockRecorder) FindOrdersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByUserID", reflect.TypeOf((*MockRepo)(nil).FindOrdersByUserID), ctx, userID)
}

// Save mocks base method.
func (m *MockRepo) Save(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepoMockRecorder) Save(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepo)(nil).Save), ctx, order)
}

// Update mocks base method.
func (m *MockRepo) Update(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepoMockRecorder) Update(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepo)(nil).Update), ctx, order)
}
