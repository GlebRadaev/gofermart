// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/service/balanceservice/balanceservice.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/service/balanceservice/balanceservice.go -destination=/var/yandex-project/gofermart/internal/service/balanceservice/balanceservice_mock.go -package=balanceservice
//

// Package balanceservice is a generated GoMock package.
package balanceservice

import (
	context "context"
	reflect "reflect"

	domain "github.com/GlebRadaev/gofermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceRepo is a mock of BalanceRepo interface.
type MockBalanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepoMockRecorder
	isgomock struct{}
}

// MockBalanceRepoMockRecorder is the mock recorder for MockBalanceRepo.
type MockBalanceRepoMockRecorder struct {
	mock *MockBalanceRepo
}

// NewMockBalanceRepo creates a new mock instance.
func NewMockBalanceRepo(ctrl *gomock.Controller) *MockBalanceRepo {
	mock := &MockBalanceRepo{ctrl: ctrl}
	mock.recorder = &MockBalanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepo) EXPECT() *MockBalanceRepoMockRecorder {
	return m.recorder
}

// CreateUserBalance mocks base method.
func (m *MockBalanceRepo) CreateUserBalance(ctx context.Context, userID int) (*domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserBalance", ctx, userID)
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserBalance indicates an expected call of CreateUserBalance.
func (mr *MockBalanceRepoMockRecorder) CreateUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserBalance", reflect.TypeOf((*MockBalanceRepo)(nil).CreateUserBalance), ctx, userID)
}

// GetUserBalance mocks base method.
func (m *MockBalanceRepo) GetUserBalance(ctx context.Context, userID int) (*domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalanceRepoMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalanceRepo)(nil).GetUserBalance), ctx, userID)
}

// UpdateUserBalance mocks base method.
func (m *MockBalanceRepo) UpdateUserBalance(ctx context.Context, userID int, balance *domain.Balance) (*domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", ctx, userID, balance)
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockBalanceRepoMockRecorder) UpdateUserBalance(ctx, userID, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockBalanceRepo)(nil).UpdateUserBalance), ctx, userID, balance)
}

// MockWithdrawalRepo is a mock of WithdrawalRepo interface.
type MockWithdrawalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalRepoMockRecorder
	isgomock struct{}
}

// MockWithdrawalRepoMockRecorder is the mock recorder for MockWithdrawalRepo.
type MockWithdrawalRepoMockRecorder struct {
	mock *MockWithdrawalRepo
}

// NewMockWithdrawalRepo creates a new mock instance.
func NewMockWithdrawalRepo(ctrl *gomock.Controller) *MockWithdrawalRepo {
	mock := &MockWithdrawalRepo{ctrl: ctrl}
	mock.recorder = &MockWithdrawalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalRepo) EXPECT() *MockWithdrawalRepoMockRecorder {
	return m.recorder
}

// CreateWithdrawal mocks base method.
func (m *MockWithdrawalRepo) CreateWithdrawal(ctx context.Context, withdrawal *domain.Withdrawal) (*domain.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, withdrawal)
	ret0, _ := ret[0].(*domain.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockWithdrawalRepoMockRecorder) CreateWithdrawal(ctx, withdrawal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockWithdrawalRepo)(nil).CreateWithdrawal), ctx, withdrawal)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockWithdrawalRepo) GetWithdrawalsByUserID(ctx context.Context, userID int) ([]domain.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockWithdrawalRepoMockRecorder) GetWithdrawalsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockWithdrawalRepo)(nil).GetWithdrawalsByUserID), ctx, userID)
}
