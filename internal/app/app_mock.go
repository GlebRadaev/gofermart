// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/internal/app/app.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/internal/app/app.go -destination=/var/yandex-project/gofermart/internal/app/app_mock.go -package=app
//

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApplicationI is a mock of ApplicationI interface.
type MockApplicationI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationIMockRecorder
	isgomock struct{}
}

// MockApplicationIMockRecorder is the mock recorder for MockApplicationI.
type MockApplicationIMockRecorder struct {
	mock *MockApplicationI
}

// NewMockApplicationI creates a new mock instance.
func NewMockApplicationI(ctrl *gomock.Controller) *MockApplicationI {
	mock := &MockApplicationI{ctrl: ctrl}
	mock.recorder = &MockApplicationIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationI) EXPECT() *MockApplicationIMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockApplicationI) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockApplicationIMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApplicationI)(nil).Start), ctx)
}

// Wait mocks base method.
func (m *MockApplicationI) Wait(ctx context.Context, cancel context.CancelFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx, cancel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockApplicationIMockRecorder) Wait(ctx, cancel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockApplicationI)(nil).Wait), ctx, cancel)
}
