// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/pkg/auth/hash.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/pkg/auth/hash.go -destination=/var/yandex-project/gofermart/pkg/auth/hash_mock.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHashServiceInterface is a mock of HashServiceInterface interface.
type MockHashServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHashServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockHashServiceInterfaceMockRecorder is the mock recorder for MockHashServiceInterface.
type MockHashServiceInterfaceMockRecorder struct {
	mock *MockHashServiceInterface
}

// NewMockHashServiceInterface creates a new mock instance.
func NewMockHashServiceInterface(ctrl *gomock.Controller) *MockHashServiceInterface {
	mock := &MockHashServiceInterface{ctrl: ctrl}
	mock.recorder = &MockHashServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashServiceInterface) EXPECT() *MockHashServiceInterfaceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockHashServiceInterface) ComparePassword(hashedPassword, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockHashServiceInterfaceMockRecorder) ComparePassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockHashServiceInterface)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockHashServiceInterface) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHashServiceInterfaceMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHashServiceInterface)(nil).HashPassword), password)
}
