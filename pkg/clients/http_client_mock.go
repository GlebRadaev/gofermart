// Code generated by MockGen. DO NOT EDIT.
// Source: /var/yandex-project/gofermart/pkg/clients/http_client.go
//
// Generated by this command:
//
//	mockgen -source=/var/yandex-project/gofermart/pkg/clients/http_client.go -destination=/var/yandex-project/gofermart/pkg/clients/http_client_mock.go -package=clients
//

// Package clients is a generated GoMock package.
package clients

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClientI is a mock of HTTPClientI interface.
type MockHTTPClientI struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientIMockRecorder
	isgomock struct{}
}

// MockHTTPClientIMockRecorder is the mock recorder for MockHTTPClientI.
type MockHTTPClientIMockRecorder struct {
	mock *MockHTTPClientI
}

// NewMockHTTPClientI creates a new mock instance.
func NewMockHTTPClientI(ctrl *gomock.Controller) *MockHTTPClientI {
	mock := &MockHTTPClientI{ctrl: ctrl}
	mock.recorder = &MockHTTPClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientI) EXPECT() *MockHTTPClientIMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClientI) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientIMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientI)(nil).Do), req)
}

// Get mocks base method.
func (m *MockHTTPClientI) Get(url string, headers http.Header) (int, []byte, http.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url, headers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(http.Header)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientIMockRecorder) Get(url, headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClientI)(nil).Get), url, headers)
}
